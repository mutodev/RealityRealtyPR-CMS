<?php

/**
 * BaseArea
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $type
 * @property integer $country_id
 * @property integer $region_id
 * @property integer $state_id
 * @property integer $county_id
 * @property integer $city_id
 * @property decimal $latitude
 * @property decimal $longitude
 * @property boolean $display
 * @property Area $Country
 * @property Area $Region
 * @property Area $State
 * @property Area $County
 * @property Area $City
 * @property Doctrine_Collection $Property
 * @property Doctrine_Collection $Client
 * @property Doctrine_Collection $LeadSearch
 * @property Doctrine_Collection $Branch
 * @property Doctrine_Collection $AccountRole
 * @property Doctrine_Collection $Area
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArea extends Doctrine_Record_Yammon
{
    public function setTableDefinition()
    {
        $this->setTableName('area');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'root',
              1 => 'country',
              2 => 'region',
              3 => 'state',
              4 => 'county',
              5 => 'city',
              6 => 'area',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('country_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'notnull' => false,
             ));
        $this->hasColumn('region_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'notnull' => false,
             ));
        $this->hasColumn('state_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'notnull' => false,
             ));
        $this->hasColumn('county_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'notnull' => false,
             ));
        $this->hasColumn('city_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => 1,
             'notnull' => false,
             ));
        $this->hasColumn('latitude', 'decimal', 17, array(
             'type' => 'decimal',
             'length' => 17,
             'scale' => 14,
             'notnull' => false,
             ));
        $this->hasColumn('longitude', 'decimal', 17, array(
             'type' => 'decimal',
             'length' => 17,
             'scale' => 14,
             'notnull' => false,
             ));
        $this->hasColumn('display', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Area as Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Area as Region', array(
             'local' => 'region_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Area as State', array(
             'local' => 'state_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Area as County', array(
             'local' => 'county_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Area as City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Property', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $this->hasMany('Client', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $this->hasMany('LeadSearch', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $this->hasMany('Branch', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $this->hasMany('AccountRole', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('Area', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $nestedset0 = new Doctrine_Template_NestedSet();
        $translatable0 = new Doctrine_Template_Translatable(array(
             'languages' => 
             array(
              0 => 'en',
              1 => 'es',
             ),
             'fields' => 
             array(
              'name' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => true,
              ),
              'country' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
              'region' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
              'state' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
              'county' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
              'city' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
              'area' => 
              array(
              'type' => 'string',
              'length' => 255,
              'notnull' => false,
              ),
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
        $this->actAs($translatable0);
    }
}