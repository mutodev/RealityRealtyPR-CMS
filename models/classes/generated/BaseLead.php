<?php

/**
 * BaseLead
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $source_id
 * @property integer $account_id
 * @property integer $property_id
 * @property string $first_name
 * @property string $last_name
 * @property string $phone
 * @property string $email
 * @property enum $type
 * @property Text $notes
 * @property Account $Account
 * @property LeadSource $Source
 * @property Property $Property
 * @property Doctrine_Collection $Properties
 * @property Doctrine_Collection $Lead
 * @property Doctrine_Collection $PropertyLeadRelation
 * @property Doctrine_Collection $Searches
 * @property Doctrine_Collection $LeadLog
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLead extends Doctrine_Record_Yammon
{
    public function setTableDefinition()
    {
        $this->setTableName('lead');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('source_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('account_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('property_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Buyer',
              1 => 'Seller',
              2 => 'Rent',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('notes', 'Text', null, array(
             'type' => 'Text',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Account', array(
             'local' => 'account_id',
             'foreign' => 'id'));

        $this->hasOne('LeadSource as Source', array(
             'local' => 'source_id',
             'foreign' => 'id'));

        $this->hasOne('Property', array(
             'local' => 'property_id',
             'foreign' => 'id'));

        $this->hasMany('Lead as Properties', array(
             'refClass' => 'PropertyLeadRelation',
             'local' => 'lead_id',
             'foreign' => 'property_id'));

        $this->hasMany('Lead', array(
             'refClass' => 'PropertyLeadRelation',
             'local' => 'property_id',
             'foreign' => 'lead_id'));

        $this->hasMany('PropertyLeadRelation', array(
             'local' => 'id',
             'foreign' => 'lead_id'));

        $this->hasMany('LeadSearch as Searches', array(
             'local' => 'id',
             'foreign' => 'lead_id'));

        $this->hasMany('LeadLog', array(
             'local' => 'id',
             'foreign' => 'lead_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}