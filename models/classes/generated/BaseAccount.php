<?php

/**
 * BaseAccount
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $company_id
 * @property integer $organization_id
 * @property integer $branch_id
 * @property integer $staff_id
 * @property string $first_name
 * @property string $last_name
 * @property string $username
 * @property string $password_hash
 * @property string $password_salt
 * @property date $last_login
 * @property integer $last_login_attempt
 * @property integer $login_tries
 * @property enum $sex
 * @property string $email
 * @property string $phone
 * @property string $phone_ext
 * @property string $phone2
 * @property string $phone2_ext
 * @property string $internal_id
 * @property string $language
 * @property boolean $receive_email_notifications
 * @property boolean $receive_sms_notifications
 * @property boolean $config_method_call_bypass_manual_confirmation
 * @property boolean $config_method_call_allow_multiple_calls
 * @property boolean $active
 * @property string $activation_key
 * @property timestamp $activation_key_expires_at
 * @property string $password_key
 * @property timestamp $password_key_expires_at
 * @property string $position
 * @property string $s3_photo
 * @property boolean $show_in_list
 * @property string $license
 * @property boolean $is_realtor
 * @property boolean $auction
 * @property boolean $commercial
 * @property boolean $resell
 * @property boolean $short_sales
 * @property boolean $new_developments
 * @property boolean $relocation
 * @property boolean $foreclosure
 * @property boolean $is_top_agent
 * @property boolean $show_all_properties
 * @property enum $type
 * @property string $twitter
 * @property string $facebook
 * @property string $instagram
 * @property Company $Company
 * @property Branch $Branch
 * @property Doctrine_Collection $Groups
 * @property Organization $Organization
 * @property Doctrine_Collection $Roles
 * @property Doctrine_Collection $Permissions
 * @property Doctrine_Collection $Rules
 * @property Doctrine_Collection $Properties
 * @property Doctrine_Collection $Property
 * @property Doctrine_Collection $Contract
 * @property Doctrine_Collection $Offers
 * @property Doctrine_Collection $Goals
 * @property Doctrine_Collection $PriceLogs
 * @property Doctrine_Collection $Lead
 * @property Doctrine_Collection $LeadLog
 * @property Doctrine_Collection $Department
 * @property Doctrine_Collection $AccountGroupRelation
 * @property Doctrine_Collection $AccountRole
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAccount extends Doctrine_Record_Yammon
{
    public function setTableDefinition()
    {
        $this->setTableName('account');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('company_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('organization_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('branch_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'unsigned' => true,
             ));
        $this->hasColumn('staff_id', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             'unsigned' => true,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('password_hash', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('password_salt', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('last_login', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('last_login_attempt', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('login_tries', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('sex', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'M',
              1 => 'F',
             ),
             'notnull' => false,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('phone_ext', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('phone2', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('phone2_ext', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('internal_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('language', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('receive_email_notifications', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('receive_sms_notifications', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('config_method_call_bypass_manual_confirmation', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('config_method_call_allow_multiple_calls', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('activation_key', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('activation_key_expires_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('password_key', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('password_key_expires_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('position', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('s3_photo', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('show_in_list', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('license', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('is_realtor', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('auction', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('commercial', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('resell', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('short_sales', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
             $this->hasColumn('luxury', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('new_developments', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('relocation', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('foreclosure', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_top_agent', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('show_all_properties', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Broker',
              1 => 'Administrator',
              2 => 'Manager',
             ),
             ));
        $this->hasColumn('twitter', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('facebook', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('instagram', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Company', array(
             'local' => 'company_id',
             'foreign' => 'id'));

        $this->hasOne('Branch', array(
             'local' => 'branch_id',
             'foreign' => 'id'));

        $this->hasMany('AccountGroup as Groups', array(
             'refClass' => 'AccountGroupRelation',
             'local' => 'account_id',
             'foreign' => 'group_id'));

        $this->hasOne('Organization', array(
             'local' => 'organization_id',
             'foreign' => 'id'));

        $this->hasMany('Role as Roles', array(
             'refClass' => 'AccountRole',
             'local' => 'account_id',
             'foreign' => 'role_id'));

        $this->hasMany('Permission as Permissions', array(
             'refClass' => 'PermissionRule',
             'local' => 'account_id',
             'foreign' => 'permission_id'));

        $this->hasMany('PermissionRule as Rules', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('Property as Properties', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('Property', array(
             'local' => 'id',
             'foreign' => 'secondary_account_id'));

        $this->hasMany('Contract', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('PropertyOffer as Offers', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('Goal as Goals', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('PropertyPriceLog as PriceLogs', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('Lead', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('LeadLog', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('Department', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('AccountGroupRelation', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('AccountRole', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $upload0 = new Doctrine_Template_Upload(array(
             'fields' => 
             array(
              'landing_header' => 
              array(
              'path' => 'public/uploads/account/landing/header',
              ),
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $translatable0 = new Doctrine_Template_Translatable(array(
             'languages' => 
             array(
              0 => 'en',
              1 => 'es',
             ),
             'fields' => 
             array(
              'landing_quote' => 
              array(
              'type' => 'text',
              ),
              'landing_description' => 
              array(
              'type' => 'text',
              ),
             ),
             ));
        $this->actAs($upload0);
        $this->actAs($timestampable0);
        $this->actAs($translatable0);
    }
}